<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <link>https://0x000000db.github.io/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Jul 2023 16:08:17 +0100</lastBuildDate><atom:link href="https://0x000000db.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Crash when using `shared_from_this` when not declared public inheritance</title>
      <link>https://0x000000db.github.io/posts/why-does-shared-from-this-crash-with-private-inheritance/</link>
      <pubDate>Fri, 28 Jul 2023 16:08:17 +0100</pubDate>
      
      <guid>https://0x000000db.github.io/posts/why-does-shared-from-this-crash-with-private-inheritance/</guid>
      <description>Introduction I made a simple mistake of inheriting std::enable_shared_from_this&amp;lt;T&amp;gt; but not specifying the inheritance type. But using shared_from_this results in a crash, why is that? I&amp;rsquo;d like to point out that since it does not work at all it&amp;rsquo;s most likely not really going to pop up during production and more likely confusion during development, however it&amp;rsquo;s still interesting, let&amp;rsquo;s delve. I&amp;rsquo;ve noticed this both on Ubuntu and Mac so far.</description>
    </item>
    
    <item>
      <title>Why does shared_ptr sometimes lock?</title>
      <link>https://0x000000db.github.io/posts/why-does-shared-ptr-sometimes-lock/</link>
      <pubDate>Fri, 28 Jul 2023 16:08:17 +0100</pubDate>
      
      <guid>https://0x000000db.github.io/posts/why-does-shared-ptr-sometimes-lock/</guid>
      <description>Introduction In this post I want to explore why std::shared_ptr sometimes uses a mutex instead of using atomic instructions. I discovered this a while back when implementing a lazy resource cache for a game, which essentially stored a table of weak_ptr references to already loaded data from disk, encouraging sharing of memory and not an expensive load from disk again. However when it came to profiling I noticed that weak_ptr::lock had climbed to the top with a mutex lock, why would this be?</description>
    </item>
    
  </channel>
</rss>
